Validating References with Lifetimes

  Lifetimes are another kind of generic that we've already been using. Rather than
  ensuring that a type has the behavior we want, lifetimes ensure that references
  are valid as long as we need them to be.

  Every reference in Rust has a _lifetime_, which is the scope for which that reference
  is valid. Most of the time, lifetimes are implicit and inferred, just like most 
  of the time, types are inferred. We only must annotate types when multiple types are
  possible. Similarly, we must annotate lifetimes when the lifetimes of references
  could be related in a few different ways.

  This is a concept most other languages do not have.


  Preventing Dangling References with Lifetimes

    The main aim of lifetimes is to prevent dangling references, which cause a program
    to reference data other than the data it's intended to reference.
    Example:
    ```
      fn main() {
        let r;

        {
          let x = 5;
          r = &x;
        }

        println!("r: {}", r);
      }
    ```
    This code won't compile because `x` goes out of scope, but a reference to it is
    assigned to `r`. The value `r` is referring to has gone out of scope before we
    attempt to use it. The variable `x` doesn't live long enough. 

  The Borrow Checker

    The Rust compiler has a borrow checker that compares scopes to determine
    whether all borrows are valid. At compile time, Rust compares the size of the two
    lifetimes and sees that `r` is assigned a reference to `x` that has a smaller
    scope than the scope of `r`.

  Generic Lifetimes in Functions

    We'll write a function that returns the longer of two string slices. This function
    will take two string slices and return a single string slice. 

    Filename: src/main.rs
    ```
      fn main() {
        let string1 = String::from("abcd");
        let string2 = "xyz";

        let result = longest(string1.as_str(), string2);
        println!("The longest string is {}", result);
      }
    ```

    If we try to implement the `longest` function as shown, it won't compile
    Filename: src/main.rs
    ```
      fn longest(x: &str, y: &str) -> &str {
        if x.len() > y.len() {
          x
        } else {
          y
        }
      }
    ```

    The compiler will return some help text that says
    "This function's return type contains a borrowed value, but the signature does not
    say whether it is borrowed from `x` or `y`."

    The text reveals that the return type needs a generic lifetime parameter on it because
    Rust can't tell whether the reference being returned refers to `x` or `y`. We don't know
    either, because the `if` blcok returns a reference to `x` and the `else` block returns 
    a reference to `y`.

    We need to add a generic lifetime parameter that defines the relationship between the
    references so the borrow checker can perform its analysis.

  Lifetime Annotation Syntax

    Lifetime annotations don't change how long any references live. Rather, they describe the
    relationships of the lifetimes of multiple references to each other without affecting
    the lifttimes.

    Lifetime annotations have an unusual syntax: the names of lifetime parameters must start
    with an apostrophy `'` and are usually all lowercase and very short. Most people use the
    name `'a` for the first lifetime annotation. We place lifetime parameters after the `&`
    of a reference, using a space to separate the lifetime parameter from the reference's type.
    Example:
    ```
      &i32        // a reference
      &'a i32     // a reference with an explicit lifetime
      &'a mut i32 // a mutable reference with an explicit lifetime
    ```
    One lifetime annotation by itself doesn't have much meaning, because the annotations are
    meant to tell Rust how generic lifetime parameters of multiple references relate to each 
    other.

  Lifetime Annotations in Function Signatures

    We want the signature to express the following constraint: the returned reference will be
    valid as long as both the parameters are valid. This is the relationship betweem lifetimes
    of the parameteres and the return value.

    Example:
    ```
      fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
        if x.len() > y.len() {
          x
        } else {
          y
        }
      }
    ```

    The signature now tells Rust that for some lifetime `'a`, the function takes two parameters,
    both of which are string slices that live at least as long as lifetime `'a`. The function
    signature also tells Rust that the string slice returned from the function will live at
    least as long as lifetime `'a`.

    Remember, when we specify the lifetime parameters in this function signature, we're not 
    changing the lifetimes of any values passsed in or returned. Rather, we're specifying that
    the borrow checker shohuld reject any values that don't adhere to these constraints. Note that
    the `longest` function doesn't need to know exactly how long `x` and `y` will live. It only 
    needs to know that there is some scope that can be substituted for `'a` that will satisfy
    this signature.

    The annotations become part of the contract of the function. Because the annotations are part
    of the function signature, the compiler can point to specific parts of the code that breaks
    the contract.

  Thinking in Terms of Lifetimes

    If we changed the implementation of the `longest` function to always return the first parameter
    rather than the longest string slice, we wouldn't need to specify a lifetime on the `y` parameter.
    This is because the lifetime of `y` does not have any relationship with the lifetime of `x` or the 
    return value. 

    When returning a reference from a function, the lifetime parameter for the return type needs to 
    match the lifetime parameter for one of the parameters. Otherwise the compiler will error with
    a message saying "returns a reference to data ownded by the current function".

  Lifetime Annotations in Struct Definitions

    We can define structs to hold references, but in that case we would need to add a lifetime parameter
    on every reference in the struct's definition.
    Example:
    Filename: src/main.rs
    ```
      struct ImportantExcerpt<'a> {
        part: &'a str,
      }

      fn main() {
        let novel = String::from("Call me Ishmael. Some years ago...");
        let first_sentence = novel.split('.')
          .next()
          .expect("Could not find a '.'");
        let i = ImportantExcerpt { part: first_sentence };
      }
    ```

    This struct has the single field `part` that holds a string slice, which is a reference. The lifetime
    annotation mesans an instance of ImportantExcerpt can't outlive the reference it holds in its part field.

  Lifetime Elision

    The patterns programmed into Rust's analysis of references are called the lifetime elision rules. These
    aren't rules for the programmer, but a set of cases that the compiler will consider to determine if 
    your code requires explicit lifetimes. 

    Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return
    values are called output lifetimes.

    The compiler uses three rules tofigure out the lifetimes of the regerences when there aren't 
    explicit annotation. If the compiler gets to the end of the three rules and there are still references
    for which it can't figure out lifetimes, the compiler will stop with an error. These rules apply to 
    fn definitions as well as impl blocks.
    Rules:
      1. The compiler assigns a lifetime parameter to each parameter that's a reference. 
         `fn foo<'a>(x: &'a i32)` || `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`
      2. If there is exactly one input lifetime parameter, that lifetime is assigned to all output lifetime
         parameters. `fn foo<'a>(x: &'a i32): &'a i32`
      3. If there are multiple input lifetime parameters, but one of them is `&self or `&mut self` because
          this is a method, the lifetime of `self` is assigned to all output lifetime parameters.

    The syntax for specifying lifetime parameters in method definitions is the same as that for functions.

    One special lifetime is `'static` which denotes that the affected reference can live for the entire 
    duration of the program. All string literals have the `'static` lifetime.
    Example:
    ```
      let s: &'static str = "I have a static lifetime.";
    ```

    The text of this string is stored directly in the program's binary, which is always available. Therefore,
    the lifetime of all string literals is `'static`.

  Example with Generic Type Parameters, Trait Bounds, and Lifetimes Together
  ```
    use std:fmt::Display;

    fn longest_with_an_announcement<'a, T>(
      x: &'a str,
      y: &'a str,
      announcement: T,
    ) -> &'a str
    where
      T: Display,
    {
      println!("Announcement! {}", announcement);
      if x.len() > y.len() {
        x
      } else {
        y
      }
    }
  ```